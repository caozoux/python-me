#!/usr/libexec/platform-python

from __future__ import print_function
from bcc import BPF
import argparse
from time import strftime

import argparse
import curses
import pwd
import re
import signal
from time import sleep

bpf_text = """
#include <uapi/linux/ptrace.h>
#include <linux/mm.h>
#include <linux/fs.h>
#include <linux/cgroup-defs.h>

struct taskstackkey {
    u32 pid;
    int kernel_stack_id;
};

struct data_t {
    u32 pid;
    u64 delta_us;
    int kernel_stack_id;
};

struct taskkey {
    u32 pid;
    //char comm[16];
};

BPF_HASH(taskstack, struct taskstackkey);
BPF_HASH(taskpid, struct taskkey);
BPF_STACK_TRACE(stack_traces, 1024);
BPF_PERF_OUTPUT(events);

int trace_mutex_lock(struct pt_regs *ctx, struct cgroup *dst_cgrp,
   const char *path, struct task_struct *task, bool threadgroup)
{
    struct taskkey key;
    u64 ts = bpf_ktime_get_ns();

    //if (ctx->di != 0xffffffff84a4f1c0) //cgroup
    if (ctx->di != 0xffffffff84b683e0)
      return 0;

    if (DEBUG)
        bpf_trace_printk("lock");
    key.pid = bpf_get_current_pid_tgid();
    //bpf_get_current_comm(key.comm, 16);
    ts &= ~(15UL);
    taskpid.update(&key, &ts);

    return 0;
}

int trace_mutex_unlock(struct pt_regs *ctx) {
    struct taskkey key;
    u64 *ts, delta;
    int per_key=0;
    u64 *value;
    u32 pid = bpf_get_current_pid_tgid();

    //bpf_get_current_comm(key.comm, 16);
    key.pid = pid;

    //if (ctx->di != 0xffffffff84a4f1c0)
    if (ctx->di != 0xffffffff84b683e0)
      return 0;

    ts = taskpid.lookup(&key);
    if (ts == 0)
        return 0;

    delta = bpf_ktime_get_ns() - *ts;

    if (delta > 10000000) {
        struct taskstackkey stackkey;
        stackkey.pid = bpf_get_current_pid_tgid();
        stackkey.kernel_stack_id = stack_traces.get_stackid((struct pt_regs *)ctx, 0);
        taskstack.increment(stackkey, delta);
        if (DEBUG)
            bpf_trace_printk("delay %ld", delta);
     }

    taskpid.delete(&key);

    return 0;
}

TRACEPOINT_PROBE(sched, sched_switch)
{
    struct taskkey key;
    u64 *ts, *value, delta;
    u32 pid;

    pid = args->prev_pid;
    key.pid = pid;
    ts = taskpid.lookup(&key);
    if (ts && (*ts &1)) {
        struct data_t data = {};
        data.pid = pid;
        data.delta_us = bpf_ktime_get_ns()/1000;
        data.kernel_stack_id = stack_traces.get_stackid((struct pt_regs *)args, 0);
        // output
        events.perf_submit(args, &data, sizeof(data));
        if (DEBUG)
            bpf_trace_printk("switch p %ld", pid);
    }

    pid = args->next_pid;
    key.pid = pid;
    ts = taskpid.lookup(&key);
    if (ts) {
        if (*ts & 0xf) {
            delta = *ts;
            delta += 1;
            if (DEBUG)
                bpf_trace_printk("switch n mult %ld %ld", pid, delta);
        } else {
            delta = bpf_ktime_get_ns();
            delta &= ~(15UL);
            delta += 1;
            taskpid.update(&key, &delta);
            if (DEBUG)
                bpf_trace_printk("switch n %ld %ld", pid, delta);
        }
    }

    return 0;
}

"""

bpf_text = bpf_text.replace('DEBUG', '0')
b = BPF(text=bpf_text)
b.attach_kprobe(event="mutex_lock", fn_name="trace_mutex_lock")
b.attach_kprobe(event="mutex_unlock", fn_name="trace_mutex_unlock")

exiting = 0

stack_traces = b.get_table("stack_traces")
taskstack = b.get_table("taskstack")
taskpid = b.get_table("taskpid")

while 1:
    try:
        sleep(1)
        exiting = 1
    except KeyboardInterrupt:
        exiting = 1

    if 1:
      for k, v in sorted(taskstack.items(),
                         key=lambda taskstack: taskstack[1].value):
          kernel_stack = stack_traces.walk(k.kernel_stack_id)
          for addr in kernel_stack:
              print("    %-16x %s" % (addr, b.ksym(addr)))
          print("    %d\n" % v.value)
    stack_traces.clear()
    if exiting:
        exit(1)

