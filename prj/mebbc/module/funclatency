#!/usr/libexec/platform-python
# @lint-avoid-python-3-compatibility-imports
#
# funclatency   Time functions and print latency as a histogram.
#			   For Linux, uses BCC, eBPF.
#
# USAGE: funclatency [-h] [-p PID] [-i INTERVAL] [-T] [-u] [-m] [-F] [-r] [-v]
#					pattern
#
# Run "funclatency -h" for full usage.
#
# The pattern is a string with optional '*' wildcards, similar to file
# globbing. If you'd prefer to use regular expressions, use the -r option.
#
# Without the '-l' option, only the innermost calls will be recorded.
# Use '-l LEVEL' to record the outermost n levels of nested/recursive functions.
#
# Copyright (c) 2015 Brendan Gregg.
# Copyright (c) 2021 Chenyue Zhou.
# Licensed under the Apache License, Version 2.0 (the "License")
#
# 20-Sep-2015   Brendan Gregg	   Created this.
# 06-Oct-2016   Sasha Goldshtein	Added user function support.
# 14-Apr-2021   Chenyue Zhou		Added nested or recursive function support.

from __future__ import print_function
from bcc import BPF
from time import sleep, strftime
import argparse
import signal

# arguments
examples = """examples:
	./funclatency 100			   # monitor the lock latency more than 100 us
	./funclatency -m 100			# monitor the lock latency more than 100 milliseconds
	./funclatency -p 181 100		# monitor process 181 only
"""
parser = argparse.ArgumentParser(
	description="Time functions and print latency as a histogram",
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=examples)
parser.add_argument("-p", "--pid", type=int,
	help="trace this PID only")
parser.add_argument("-i", "--interval", type=int,
	help="summary interval, in seconds")
parser.add_argument("-v", "--verbose", action="store_true",
	help="print the BPF program (for debugging purposes)")
parser.add_argument("pattern",
	help="threshold time")
args = parser.parse_args()
if args.duration and not args.interval:
	args.interval = args.duration
if not args.interval:
	args.interval = 99999999

def bail(error):
	print("Error: " + error)
	exit(1)

pattern = args.pattern

# define BPF program
bpf_text = """
#include <uapi/linux/ptrace.h>

struct depth_id {
  u64 pid;
  u64 depth;
};

struct stack_ts {
  u64 ls_ts;
  u64 lr_ts;
  u64 laddr;
};

struct lock_report{
  u64 laddr;	
  u64 ls_ts;	
  u64 lr_ts;	
  int stackid;
};

BPF_HASH(track,	  u64, u64);
BPF_HASH(lock_depth, u64, u64);
BPF_STACK_TRACE(stack_traces, 2048);
BPF_HASH(stack,	  struct depth_id, struct stack_ts);
BPF_HASH(time_held,  struct depth_id, u64);
BPF_HASH(time_aq,    u64, u64);
BPF_HASH(report_lock, struct lock_report);

int kprobe_mutex_entry(struct pt_regs *ctx)
{
	u64 tgid_pid = bpf_get_current_pid_tgid();

	u64 one = 1, zero = 0;

	track.update(&tgid_pid, &one);

	u64 *depth = lock_depth.lookup(&tgid_pid);

	if (!depth) {
		lock_depth.update(&tgid_pid, &zero);

		depth = lock_depth.lookup(&tgid_pid);
		/* something is wrong.. */
		if (!depth)
			return 0;
	}

	struct depth_id did = {
	  .pid	= tgid_pid,
	  .depth = *depth,
	};

	struct stack_ts s_ts = { };
	s_ts.ls_ts = bpf_ktime_get_ns();
	s_ts.lr_ts = 0;
	s_ts.laddr = ctx->di;

	stack.update(&did, &s_ts);

    u64 ts = bpf_ktime_get_ns();
    time_aq.update(&tgid_pid, &ts);

	*depth += 1;

	return 0;
}

int mutex_lock_return(struct pt_regs *ctx)
{

	u64 tgid_pid = bpf_get_current_pid_tgid();

	u64 *one = track.lookup(&tgid_pid);

	if (!one)
		return 0;

	track.delete(&tgid_pid);

	u64 *depth = lock_depth.lookup(&tgid_pid);
	if (!depth)
		return 0;

	struct depth_id did = {
	  .pid	= tgid_pid,
	  .depth = *depth - 1,
	};

	u64 *aq = time_aq.lookup(&tgid_pid);
	if (!aq)
		return 0;

	struct stack_ts *s_ts = stack.lookup(&did);
	if (!s_ts)
		return 0;

	u64 cur = bpf_ktime_get_ns();


    if (cur > *aq) {
		s_ts->lr_ts = bpf_ktime_get_ns();
	}

	time_held.update(&did, &cur);
	return 0;
}

int trace_mutex_unlock(struct pt_regs *ctx)
{
	u64 tgid_pid = bpf_get_current_pid_tgid();

    u64 *depth = lock_depth.lookup(&tgid_pid);

    if (!depth || *depth == 0)
        return 0;

    *depth -= 1;

    struct depth_id did = {
      .pid    = tgid_pid,
      .depth = *depth,
    };

    u64 *held = time_held.lookup(&did);
    if (!held)
        return 0;

	struct stack_ts *s_ts = stack.lookup(&did);
	if (!s_ts)
		return 0;

	u64 cur = bpf_ktime_get_ns();

    if (cur > *held) {
		struct lock_report l_report = {};
		l_report.laddr = s_ts->laddr;
		l_report.ls_ts = s_ts->ls_ts;
		l_report.lr_ts = s_ts->lr_ts;
    	l_report.stackid = stack_traces.get_stackid(ctx, 0);
		report_lock.atomic_increment(l_report, cur);
    }

    stack.delete(&did);
    time_held.delete(&did);

	return 0;
}
"""

#bpf_text = bpf_text.replace('FILTER',
	#'if ( delta <= %d) { return 0; }' % int(pattern)*1000)

# code substitutions
label = "msecs"

# load BPF program
b = BPF(text=bpf_text)

# attach probes
b.attach_kprobe(event="mutex_lock", fn_name="kprobe_mutex_entry")
b.attach_kretprobe(event="mutex_lock", fn_name="mutex_lock_return")
b.attach_kprobe(event="mutex_unlock",  fn_name="trace_mutex_unlock")
matched = b.num_open_kprobes()

stack_traces = b.get_table("stack_traces")

# header
print("Tracing functions for \"lock\"... Hit Ctrl-C to end.")
exiting = 0

while (1):
	try:
		sleep(1)
	except KeyboardInterrupt:
		exiting = 1

	print("\n%40s %10s %6s %10s %10s" % ("Caller", "Avg Spin", "Count", "Max spin", "Total spin"))
	report_lock = b.get_table("report_lock")
	stack_traces = b.get_table("stack_traces")
	for k, v in report_lock.items():
		print("%lx %ld %ld %ld"%(k.laddr, k.ls_ts, k.lr_ts, v.value))
		if k.stackid > 0 :
			kernel_stack = stack_traces.walk(k.stackid)
			for addr in kernel_stack:
			  print("    %-16x %s" % (addr, b.ksym(addr)))

	#stack_traces.clear()
	report_lock.clear()

	if exiting:
		break;

