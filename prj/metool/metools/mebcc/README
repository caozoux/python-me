mebcc
=====

1. tracepoint
=============

1.1 how to use
---------------

1.1.1 bpf register

b.attach_tracepoint(tp="vmscan:mm_vmscan_kswapd_wake", fn_name="trace_mm_vmscan_kswapd_wake")

1.1.2 bpf trace function

1.1.2.1  get trace event data

# cat events/vmscan/mm_vmscan_kswapd_wake/format

	name: mm_vmscan_kswapd_wake
	ID: 511
	format:
		field:unsigned short common_type;	offset:0;	size:2;	signed:0;
		field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
		field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
		field:int common_pid;	offset:4;	size:4;	signed:1;

		field:int nid;	offset:8;	size:4;	signed:1;
		field:int zid;	offset:12;	size:4;	signed:1;
		field:int order;	offset:16;	size:4;	signed:1;

	print fmt: "nid=%d zid=%d order=%d", REC->nid, REC->zid, REC->order

====>  the trace struct data as follow:

	struct trace_mm_vmscan_kswapd_wake_data {
		u64 __unused__;
		unsigned int nid;
		unsigned int zid;
		unsigned int order;
	};

1.1.2.2 trace trace event func

int trace_mm_vmscan_kswapd_wake(struct trace_mm_vmscan_kswapd_wake_data_*data)


2. HASH usage
=============

2.1 declaration
---------------

	BPF_HASH(kvm_record, struct key_t);

2.1 insert
----------

	struct key_t key= {};
	key.exit_reason=exit_reason;
	kvm_record.increment(key);

2.1 emulate
-----------
	//get the bpf vaule
	counts = b.get_table("kvm_record") 
    for k, v in counts.items():
        print("%-40s%-10d"%(kvm_type[k.exit_reason], v.value))

