#!/bin/bpftrace
#include <linux/skbuff.h>
#include <net/ip.h>
#include <net/inet_sock.h>
#include <net/inet_sock.h>
#include <linux/socket.h>
#include <linux/tcp.h>
#include <net/sock.h>
#include <net/route.h>
#include <net/dst.h>

kprobe:__ip_queue_xmit
{
  $sock = (struct sock*)arg0;
  $sk = (struct sk_buff *)arg1;
  $dst = (struct dst_entry *)($sock->sk_dst_cache);

  if ($dst != 0) {
   if ($dst->obsolete) {
     $rt = (struct rtable *)($sock->sk_dst_cache);
     if (($dst->obsolete != DST_OBSOLETE_FORCE_CHK)) {
       $net=(struct net*)$rt->dst.dev->nd_net.net;
       $net_val = $net->ipv4.rt_genid.counter;
       //@sa[$dst->dev->name, $rt->rt_genid, $net_val] += 1;
       //@ba[$net, $rt->rt_genid] += 1;
       //@ca[$net_val, $rt->rt_genid] += 1;
       //@da[$dst->dev->name, $dst->obsolete] += 1;
       @ea[$dst] += 1;
     } else {
       //@da[$dst->dev->name, $dst->obsolete] += 1;
     }
   }
  }
}

